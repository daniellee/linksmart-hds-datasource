{"version":3,"sources":["../src/query_ctrl.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEQ,e,kBAAA,S;;;;;;;;;;;;;;;;;;;;;4CAGK,0B;;;AAEX,4CAAY,MAAZ,EAAoB,SAApB,EAA+B,YAA/B,EAA6C;AAAA;;AAAA,oHACrC,MADqC,EAC7B,SAD6B;;AAG3C,gBAAK,KAAL,GAAa,MAAb;AACA,gBAAK,YAAL,GAAoB,YAApB;AACA,gBAAK,MAAL,CAAY,MAAZ,GAAqB,MAAK,MAAL,CAAY,MAAZ,IAAsB,eAA3C;AACA,gBAAK,MAAL,CAAY,MAAZ,GAAqB,MAAK,MAAL,CAAY,MAAZ,IAAsB,eAA3C;AACA,gBAAK,MAAL,CAAY,SAAZ,GAAwB,MAAK,MAAL,CAAY,SAAZ,IAAyB,EAAjD,CAP2C,CAOU;AAPV;AAQ5C;;;;uCAEY;AACX,mBAAO,KAAK,UAAL,CAAgB,YAAhB,CAA6B,KAAK,MAAlC,EACJ,IADI,CACC,KAAK,YAAL,CAAkB,mBAAlB,CAAsC,KAAtC,CADD,CAAP;AAEA;AACD;;;uCAEY;AACX,gBAAI,OAAO,IAAX;AACA,mBAAO,KAAK,UAAL,CAAgB,YAAhB,CAA6B,KAAK,MAAlC,EACJ,IADI,CACC,UAAU,OAAV,EAAmB;AACvB;AACA,sBAAQ,OAAR,CAAgB,UAAU,CAAV,EAAa;AAC3B,qBAAK,MAAL,CAAY,SAAZ,CAAsB,EAAE,IAAxB,IAAgC,EAAE,EAAlC;AACD,eAFD;AAGA,qBAAO,OAAP;AACD,aAPI,EAOF,UAAU,QAAV,EAAoB;AACrB,qBAAO,EAAP;AACD,aATI,EAUJ,IAVI,CAUC,KAAK,YAAL,CAAkB,mBAAlB,CAAsC,KAAtC,CAVD,CAAP;AAWA;AACD;;;6CAEkB;AACjB;AACA,iBAAK,SAAL,CAAe,OAAf,GAFiB,CAES;AAC3B;;;;QArC6C,S;;;;AAwChD,iCAA2B,WAA3B,GAAyC,4BAAzC","file":"query_ctrl.js","sourcesContent":["// Copyright 2016 Fraunhofer Institute for Applied Information Technology FIT\r\n\r\nimport {QueryCtrl} from 'app/plugins/sdk';\r\nimport './css/query-editor.css!'\r\n\r\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\r\n\r\n  constructor($scope, $injector, uiSegmentSrv) {\r\n    super($scope, $injector);\r\n\r\n    this.scope = $scope;\r\n    this.uiSegmentSrv = uiSegmentSrv;\r\n    this.target.metric = this.target.metric || 'select metric';\r\n    this.target.source = this.target.source || 'select source';\r\n    this.target.sourceIDs = this.target.sourceIDs || {}; // aggregation ids\r\n  }\r\n\r\n  getOptions() {\r\n    return this.datasource.queryMetrics(this.target)\r\n      .then(this.uiSegmentSrv.transformToSegments(false));\r\n    // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\r\n  }\r\n\r\n  getSources() {\r\n    var that = this;\r\n    return this.datasource.querySources(this.target)\r\n      .then(function (sources) {\r\n        // save a map of source->aggregation ids\r\n        sources.forEach(function (s) {\r\n          that.target.sourceIDs[s.text] = s.id;\r\n        });\r\n        return sources;\r\n      }, function (rejected) {\r\n        return [];\r\n      })\r\n      .then(this.uiSegmentSrv.transformToSegments(false));\r\n    // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\r\n  }\r\n\r\n  onChangeInternal() {\r\n    //console.log(\"onChangeInternal:\", this.target.source);\r\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\r\n  }\r\n}\r\n\r\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\r\n\r\n"]}