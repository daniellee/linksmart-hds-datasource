{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\n\r\nexport class GenericDatasource {\r\n\r\n  constructor(instanceSettings, $q, backendSrv) {\r\n    this.type = instanceSettings.type;\r\n    this.url = instanceSettings.url;\r\n    this.name = instanceSettings.name;\r\n    this.q = $q;\r\n    this.backendSrv = backendSrv;\r\n  }\r\n\r\n\r\n  // Called once per panel (graph)\r\n  query(options) {\r\n    var query = this.buildQueryParameters(options);\r\n\r\n    if (query.targets.length <= 0) {\r\n      return this.q.when([]);\r\n    }\r\n\r\n\t  // No metric selected\r\n\t  if (!('target' in query.targets[0])) {\r\n\t\t  return { data:[] };\r\n\t  }\r\n\t\t//console.log(\"Query:\", query);\r\n\r\n\t\t// Constructs the url to query from Data API\r\n\t  function url(id, start, end, page){\r\n\t\t  return parent.url + '/data/' + id +\r\n\t\t\t  '?start=' + start + '&end=' + end +\r\n\t\t\t  '&page=' + page;\r\n\t  }\r\n\r\n\t  var entries = Array.apply(null, Array(query.targets.length)).map(function () {\r\n\t\t  return { target: '',\tdatapoints: [] };\r\n\t  });\r\n\t  var parent = this;\r\n\t  var page = 1;\r\n\t  var idi = 0; // id index\r\n\r\n\t  // Recursively query all pages of every target\r\n\t  function recursiveReq() {\r\n\t\t  var id = query.targets[idi].target.split(':')[0];\r\n\t\t  return parent.backendSrv.datasourceRequest({\r\n\t\t\t  url: url(id, query.range.from.toISOString(), query.range.to.toISOString(), page),\r\n\t\t\t  data: query,\r\n\t\t\t  method: 'GET'\r\n\t\t  }).then(function (d) {\r\n\t\t\t  var total = d.data.total; // total from data api\r\n\t\t\t  var datapoints = parent.convertData(d.data);\r\n\t\t\t  entries[idi].target = query.targets[idi].target;\r\n\t\t\t  entries[idi].datapoints = entries[idi].datapoints.concat(datapoints);\r\n\r\n\t\t\t  if(total > entries[idi].datapoints.length) { // query the next page\r\n\t\t\t\t  page++;\r\n\t\t\t\t  return recursiveReq();\r\n\t\t\t  } else if (idi < query.targets.length-1){ // one target done, query the next target\r\n\t\t\t\t  idi++;\r\n\t\t\t\t  page = 1;\r\n\t\t\t\t  return recursiveReq();\r\n\t\t\t  } else { // all done\r\n\t\t\t\t  d.data = entries;\r\n\t\t\t\t  return d;\r\n\t\t\t  }\r\n\r\n\t\t  });\r\n\t  } // end func\r\n\r\n\t  return recursiveReq();\r\n  }\r\n\r\n  // Required\r\n  // Used for testing datasource in datasource configuration pange\r\n  testDatasource() {\r\n    return this.backendSrv.datasourceRequest({\r\n      url: this.url + '/',\r\n      method: 'GET'\r\n    }).then(response => {\r\n      if (response.status === 200) {\r\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\r\n      }\r\n    });\r\n  }\r\n\r\n  // Optional\r\n  // Required for templating\r\n  metricFindQuery(options) {\r\n     return this.backendSrv.datasourceRequest({\r\n      //url: this.url + '/search',\r\n\t\t\turl: this.url + '/registry',\r\n      data: options,\r\n      method: 'GET',\r\n      //headers: { 'Content-Type': 'application/json' }\r\n    }).then(this.convertRegistry);\r\n  }\r\n\r\n\t// Convert registration from Registry API to the format required by Grafana\r\n  convertRegistry(res) {\r\n\t\treturn _.map(res.data.entries, (d, i) => {\r\n      return { text: d.id + ': ' + d.resource, value: i};\r\n    });\r\n  }\r\n\r\n\t// Convert historical SenML data from Data API to Grafana datapoints\r\n\tconvertData(data) {\r\n\t\tvar datapoints = Array(data.data.e.length);\r\n\t\tfor(var i=0; i<data.data.e.length; i++){\r\n\t\t\tdatapoints[i] = [data.data.e[i].v, data.data.e[i].t*1000];\r\n\t\t}\r\n\r\n\t\treturn datapoints;\r\n\t}\r\n\r\n  buildQueryParameters(options) {\r\n    //remove placeholder targets\r\n    options.targets = _.filter(options.targets, target => {\r\n      return target.target !== 'select metric';\r\n    });\r\n\r\n    return options;\r\n  }\r\n}\r\n"]}