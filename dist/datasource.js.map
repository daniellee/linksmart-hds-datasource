{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["// Copyright 2016 Fraunhofer Institute for Applied Information Technology FIT\r\n\r\nimport _ from \"lodash\";\r\n\r\nexport class GenericDatasource {\r\n\r\n  constructor(instanceSettings, $q, backendSrv) {\r\n    this.type = instanceSettings.type;\r\n    this.url = instanceSettings.url;\r\n    this.name = instanceSettings.name;\r\n    this.q = $q;\r\n    this.backendSrv = backendSrv;\r\n  }\r\n\r\n  // Required\r\n  // Used for testing datasource in datasource configuration page\r\n  testDatasource() {\r\n    return this.backendSrv.datasourceRequest({\r\n      url: this.url + '/',\r\n      method: 'GET'\r\n    }).then(response => {\r\n      if (response.status === 200) {\r\n        return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\r\n      }\r\n    });\r\n  }\r\n\r\n  // Query data from Data API\r\n  // Called once per panel (graph)\r\n  query(options) {\r\n    var query = this.filterPlaceholders(options);\r\n    //console.log(\"query QUERY:\", JSON.stringify(query));\r\n\r\n    // Filter targets that are set to hidden\r\n    query.targets = _.filter(query.targets, target => {\r\n      return target.hide != true;\r\n    });\r\n\r\n    // All targets filtered OR no metric selected\r\n    if (query.targets.length == 0 || !('metric' in query.targets[0])) {\r\n      return {data: []}; // return this.q.when([]);\r\n    }\r\n\r\n    // Make a new array with zero-valued object fields\r\n    var entries = Array.apply(null, Array(query.targets.length)).map(function () {\r\n      return {target: '', datapoints: []};\r\n    });\r\n\r\n    var parent = this;\r\n    // Recursively query all pages of every target\r\n    function recursiveReq(page, idi) {\r\n      var source = query.targets[idi].source;\r\n      //console.log(\"source:\", source, \":\", query.targets[idi].sourceIDs[source]);\r\n      var apiEndpoint = \"data/\";\r\n      var senmlFields = {value: \"v\", time: \"t\"};\r\n      // Query for aggregation data\r\n      if (!source.startsWith(\"value\")) {\r\n        var aggrID = query.targets[idi].sourceIDs[source]\r\n        // retrieve the selected aggregate and interval\r\n        var re = /^([a-z]*), every ([0-9]*[s|m|h|w]).*$/g;\r\n        var m = re.exec(source);\r\n        var aggregate = m[1];\r\n        var interval = m[2];\r\n\r\n        apiEndpoint = \"aggr/\" + aggrID + \"/\";\r\n        senmlFields.value = aggregate;\r\n        senmlFields.time = \"ts\";\r\n      }\r\n\r\n      var id = query.targets[idi].metric.split(':')[0];\r\n      return parent.backendSrv.datasourceRequest({\r\n        url: parent.url + \"/\" + apiEndpoint + id +\r\n        '?start=' + query.range.from.toISOString() + '&end=' + query.range.to.toISOString() + '&page=' + page,\r\n        data: query,\r\n        method: 'GET'\r\n      }).then(function (d) {\r\n        var total = d.data.total; // total from data api\r\n        var datapoints = parent.convertData(d.data, senmlFields);\r\n        // append aggregate name to metric title\r\n        var aggregate = senmlFields.value == 'v' ? '' : '.' + senmlFields.value;\r\n        entries[idi].target = query.targets[idi].metric + aggregate;\r\n        entries[idi].datapoints = entries[idi].datapoints.concat(datapoints);\r\n\r\n        if (total > entries[idi].datapoints.length) {\r\n          // query the next page\r\n          return recursiveReq(++page, idi);\r\n        } else if (idi < query.targets.length - 1) {\r\n          // one target done, query the next target\r\n          return recursiveReq(1, ++idi);\r\n        } else {\r\n          // all done\r\n          d.data = entries;\r\n          return d;\r\n        }\r\n\r\n      });\r\n    } // end func\r\n\r\n    // Start from page 1, id 0\r\n    return recursiveReq(1, 0);\r\n  }\r\n\r\n  // Convert historical SenML data from Data/Aggr API to Grafana datapoints\r\n  convertData(data, senmlFields) {\r\n    var datapoints = Array(data.data.e.length);\r\n    for (var i = 0; i < data.data.e.length; i++) {\r\n      datapoints[i] = [data.data.e[i][senmlFields.value], data.data.e[i][senmlFields.time] * 1000];\r\n    }\r\n\r\n    return datapoints;\r\n  }\r\n\r\n  // Remove targets that have unselected metric or source\r\n  filterPlaceholders(options) {\r\n    options.targets = _.filter(options.targets, target => {\r\n      return target.metric !== 'select metric' && target.source !== 'select source';\r\n    });\r\n\r\n    return options;\r\n  }\r\n\r\n  // Query list of metrics from Registry API\r\n  // Required for templating\r\n  queryMetrics(options) {\r\n    return this.backendSrv.datasourceRequest({\r\n      //url: this.url + '/search',\r\n      url: this.url + '/registry',\r\n      data: options,\r\n      method: 'GET',\r\n      //headers: { 'Content-Type': 'application/json' }\r\n    }).then(this.convertMetrics);\r\n  }\r\n\r\n  // Convert registration from Registry API to the format required by Grafana\r\n  convertMetrics(res) {\r\n    return _.map(res.data.entries, (d, i) => {\r\n      return {text: d.id + ': ' + d.resource, value: i};\r\n    });\r\n  }\r\n\r\n  // Query list of sources of data (value and aggregations) from Registry API\r\n  // Required for templating\r\n  querySources(options) {\r\n    // Metric is not selected\r\n    if (options.metric == 'select metric') {\r\n      return new Promise((resolve, reject) => {\r\n        reject(\"metric not selected\");\r\n      });\r\n    }\r\n    var id = options.metric.split(':')[0];\r\n    return this.backendSrv.datasourceRequest({\r\n      url: this.url + '/registry/' + id,\r\n      method: 'GET',\r\n      //headers: { 'Content-Type': 'application/json' }\r\n    }).then(this.convertSources);\r\n  }\r\n\r\n  // Convert meta data about aggregates from Registry API to the format required by Grafana\r\n  convertSources(res) {\r\n    function formatRetention(retention) {\r\n      if (retention == \"\") {\r\n        return \", no retention\"; // ∞\r\n      }\r\n      return ', retention ' + retention;\r\n    }\r\n\r\n    var index = 0;\r\n    // raw un-aggregated data\r\n    var value = {id: 'value', text: 'value' + formatRetention(res.data.retention), value: index++};\r\n    // Flatten aggregations of a target (datasource)\r\n    // start with 'value' as input and concatenate flattened aggregates\r\n    var r = _.reduce(res.data.aggregation, (input, a) => {\r\n      // Flatten and format aggregates\r\n      var r2 = _.reduce(a.aggregates, (array, aggregate) => {\r\n        array.push({\r\n          id: a.id,\r\n          text: aggregate + ', every ' + a.interval + formatRetention(a.retention),\r\n          value: index++\r\n        });\r\n        return array;\r\n      }, []);\r\n\r\n      return input.concat(r2);\r\n    }, [value]);\r\n\r\n    // sort aggregates\r\n    r = [r[0]].concat(_.sortBy(r.slice(1, r.length), 'text'));\r\n    return r;\r\n\r\n  }\r\n}\r\n"]}